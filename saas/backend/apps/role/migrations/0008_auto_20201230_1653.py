# -*- coding: utf-8 -*-
"""
TencentBlueKing is pleased to support the open source community by making 蓝鲸智云-权限中心(BlueKing-IAM) available.
Copyright (C) 2017-2021 THL A29 Limited, a Tencent company. All rights reserved.
Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://opensource.org/licenses/MIT
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
"""
# Generated by Django 2.2.16 on 2020-12-30 08:53

from django.db import migrations

from backend.apps.role.models import Role, RoleUser, RoleUserSystemPermission
from backend.service.constants import RoleType


def add_admin_to_super_manager_member(apps, schema_editor):
    """将admin添加到超级管理员里"""
    # Note：这里不能调用add_super_manager_member方法给超级管理员添加admin，因为该方法里会自动向IAM后台同步admin为super role
    #  但有admin用户后台可能还未存在，所以会失败
    #  由于admin的特殊性，IAM后台判断super permission时是先判断是否super user，然后再判断是否super role
    #  所以不向后台将admin添加为super role并不会影响admin的鉴权（admin在后台代码里默认初始化为super user）

    # username = "admin"
    # role = Role.objects.get(type=RoleType.SUPER_MANAGER.value)
    # # 判断是否已存在
    # if username in role.members:
    #     return

    # # 添加成员
    # RoleUser.objects.create(role_id=role.id, username=username)

    # # 拥有所有系统的权限
    # RoleUserSystemPermission.add_enabled_users(role.id, username)


class Migration(migrations.Migration):

    dependencies = [
        ("role", "0007_auto_20201209_1437"),
        ("organization", "0004_auto_20201230_1653"),
    ]

    operations = [migrations.RunPython(add_admin_to_super_manager_member)]
